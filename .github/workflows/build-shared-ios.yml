on:
  workflow_call:
    inputs:
      STRICT:
        required: false
        type: string
        default: 'true'
      upload:
        required: false
        type: string
        default: 'false'
      ENV:
        required: false
        type: string
        default: 'staging'
      TERRASO_BACKEND:
        required: false
        type: string
        default: 'https://api.staging.terraso.net'
      APP_VERSION:
        required: false
        type: string
        default: 'v1'
      SENTRY_ORG:
        required: false
        type: string
        default: 'techmatters'
      SENTRY_PROJECT:
        required: false
        type: string
        default: 'terraso-lpks'
    secrets:
      MAPBOX_DOWNLOADS_TOKEN:
        required: true
      PUBLIC_MAPBOX_TOKEN:
        required: false
      APPLE_P12_BASE64:
        required: true
      APPLE_MOBILE_PROVISION_BASE64:
        required: true
      APPLE_CERTIFICATE_PASSWORD:
        required: true
      APPLE_ISSUER_ID:
        required: false
      APPLE_KEY_ID:
        required: false
      APPLE_APP_STORE_CONNECT_PRIVATE_KEY:
        required: false
      GOOGLE_OAUTH_ANDROID_CLIENT_ID:
        required: false
      GOOGLE_OAUTH_IOS_CLIENT_ID:
        required: false
      GOOGLE_OAUTH_IOS_URI_SCHEME:
        required: false
      MICROSOFT_OAUTH_CLIENT_ID:
        required: false
      MICROSOFT_SIGNATURE_HASH:
        required: false
      SENTRY_DSN:
        required: false
      SENTRY_AUTH_TOKEN:
        required: false

jobs:
  ios-build:
    name: iOS Build
    runs-on: macos-14
    env:
      STRICT: ${{ inputs.STRICT }}
      ENV: ${{ inputs.ENV }}
      TERRASO_BACKEND: ${{ inputs.TERRASO_BACKEND }}
      APP_VERSION: ${{ inputs.APP_VERSION }}
      GOOGLE_OAUTH_ANDROID_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH_ANDROID_CLIENT_ID }}
      GOOGLE_OAUTH_IOS_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH_IOS_CLIENT_ID }}
      GOOGLE_OAUTH_IOS_URI_SCHEME: ${{ secrets.GOOGLE_OAUTH_IOS_URI_SCHEME }}
      MICROSOFT_OAUTH_CLIENT_ID: ${{ secrets.MICROSOFT_OAUTH_CLIENT_ID }}
      MICROSOFT_SIGNATURE_HASH: ${{ secrets.MICROSOFT_SIGNATURE_HASH }}
      MAPBOX_DOWNLOADS_TOKEN: ${{ secrets.MAPBOX_DOWNLOADS_TOKEN }}
      PUBLIC_MAPBOX_TOKEN: ${{ secrets.PUBLIC_MAPBOX_TOKEN }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      SENTRY_ENABLED: ${{ vars.SENTRY_ENABLED }}
      SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      SENTRY_DISABLE_AUTO_UPLOAD: ${{ inputs.upload == 'false' && 'true' || 'false' }}
      SENTRY_ORG: ${{ inputs.SENTRY_ORG }}
      SENTRY_PROJECT: ${{ inputs.SENTRY_PROJECT }}
      CLANG: clang
      CLANGPLUSPLUS: clang++
      LD: clang
      LDPLUSPLUS: clang++

    steps:
      - name: Check out git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.tool-versions'
          cache: 'npm'
          cache-dependency-path: dev-client/package-lock.json

      - name: Install and configure ccache
        run: |
          brew install ccache
          ln -s $(which ccache) /usr/local/bin/gcc
          ln -s $(which ccache) /usr/local/bin/g++
          ln -s $(which ccache) /usr/local/bin/cc
          ln -s $(which ccache) /usr/local/bin/c++
          ln -s $(which ccache) /usr/local/bin/clang
          ln -s $(which ccache) /usr/local/bin/clang++

      - name: Install Node dependencies
        working-directory: dev-client
        run: npm ci

      - name: Restore iOS Expo cache
        uses: actions/cache@v4
        with:
          path: |
            dev-client/ios
            dev-client/node_modules
          key: expo-cache-${{ runner.os }}-ios-${{ hashFiles('**/package-lock.json', '**/app.config.ts') }}
          restore-keys: expo-cache-${{ runner.os }}-ios-

      - name: Generate ios directory
        working-directory: dev-client
        run: npm run prebuild -- -p ios

      - name: Setup Ruby (bundle)
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          working-directory: dev-client

      - name: Set Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '^15.2'

      - name: Build iOS App
        uses: yukiarrr/ios-build-action@v1.11.2
        with:
          project-path: dev-client/ios/TerrasoLandPKS.xcodeproj
          p12-base64: ${{ secrets.APPLE_P12_BASE64 }}
          mobileprovision-base64: ${{ secrets.APPLE_MOBILE_PROVISION_BASE64 }}
          code-signing-identity: 'iPhone Distribution'
          team-id: ${{ vars.APPLE_TEAM_ID }}
          certificate-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          workspace-path: dev-client/ios/TerrasoLandPKS.xcworkspace
          scheme: TerrasoLandPKS

      - name: Archive build log and intermediates
        if: '!success()'
        uses: actions/upload-artifact@v4
        with:
          name: dist-log-intermediates
          path: |
            "/Users/runner/Library/Logs/gym/TerrasoLandPKS-TerrasoLandPKS.log"
            "/Users/runner/Library/Developer/Xcode/DerivedData/TerrasoLandPKS-*/Build/Intermediates.noindex/ArchiveIntermediates/"

      - name: Upload app to TestFlight
        uses: apple-actions/upload-testflight-build@v1
        if: ${{ inputs.upload == 'true' }}
        with:
          app-path: 'output.ipa'
          issuer-id: ${{ secrets.APPLE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPLE_KEY_ID }}
          api-private-key: ${{ secrets.APPLE_APP_STORE_CONNECT_PRIVATE_KEY }}

      - name: Archive build product
        if: '!success()'
        uses: actions/upload-artifact@v4
        with:
          name: build-products
          path: |
            "/Users/runner/Library/Developer/Xcode/DerivedData/"
  
